'''The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
#1 -> Factors are paired. 1 and 24, 2 and 12, 3 and 8, 4 and 6.
An improvement of your algorithm could be to iterate to the square root of num
and then calculate the paired factors using num / i.
'''

import time as T
import math as M
start=T.time()
target=500

def triangular_number(n): return int(n*(n+1)/2)

def factors(n):
    #factor_list=list()
    factor_count=0
    i=1
    while(1):
        if(n%i==0):
            #factor_list.append(i)
            #factor_list.append(int(n/i))
            factor_count+=2                                 #I just need factors count ., so not storing factors at all
        if(i==M.floor(M.sqrt(n))):break
        i+=1
    #print(factor_list)

    #return len(factor_list)
    return factor_count

count=1
while(1):
    if(factors(triangular_number(count))>target):
        break
    count+=1
    #print (count)
print(count," th Triangular Number : ",triangular_number(count))
print("Executed in ",T.time()-start," seconds")

"""=================OUTPUT================
12375  th Triangular Number :  76576500
Executed in  55.42971706390381  seconds
========================================="""

